{"version":3,"sources":["assets/flag.svg","assets/bomb.svg","assets/smile.svg","assets/sad.svg","types/Cell.tsx","types/GameType.tsx","types/GameState.tsx","helpers/isCellClearable.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CellState","GameType","GameState","isCellClearable","gameMap","x","y","state","UNDISCOVERED","neighbourMines","mined","App","props","createGame","mines","gameType","SMALL","MEDIUM","i","Array","map","setState","remainingCells","startGame","pressedX","pressedY","row","minePlaced","Math","floor","random","length","j","neighbourBombs","clearCell","gameState","RUNNING","loseGame","FLAGGED","DISCOVERED","minePressed","FINISHED","flagCell","propsMap","onClickCell","e","type","INITIAL","reduce","count","rowCount","cell","renderCell","className","onContextMenu","onClick","key","renderCellContent","src","bomb","alt","flag","renderGame","this","BIG","smile","sad","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","oncontextmenu","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9abb7d9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flag.35d811aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/bomb.65450681.svg\";","module.exports = __webpack_public_path__ + \"static/media/smile.73d502ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.7b49a330.svg\";","export enum CellState {\n    UNDISCOVERED,\n    DISCOVERED,\n    FLAGGED,\n}\n\nexport interface Cell {\n  state: CellState;\n  neighbourMines: number;\n  mined: boolean;\n  minePressed?: boolean;\n}\n","export enum GameType {\n    SMALL,\n    MEDIUM,\n    BIG\n}","export enum GameState {\n    INITIAL,\n    RUNNING,\n    FINISHED\n}","import { Cell, CellState } from 'types/Cell';\n\nconst isCellClearable = (gameMap: Cell[][], x: number, y: number): boolean => {\n  if (\n    gameMap[x][y]?.state === CellState.UNDISCOVERED &&\n    gameMap[x][y]?.neighbourMines === 0 &&\n    !gameMap[x][y]?.mined\n  )\n    return true;\n  return false;\n};\n\nexport default isCellClearable;\n","import React, { Component, ReactNode } from 'react';\nimport { Cell, CellState } from 'types/Cell';\nimport { GameType } from 'types/GameType';\nimport { GameState } from 'types/GameState';\nimport flag from 'assets/flag.svg';\nimport bomb from 'assets/bomb.svg';\nimport smile from 'assets/smile.svg';\nimport sad from 'assets/sad.svg';\nimport { isCellClearable } from 'helpers';\nimport './App.css';\n\ninterface Props {}\n\ninterface State {\n  gameType: GameType;\n  gameMap: Cell[][];\n  mines: number;\n  gameState: GameState;\n  remainingCells: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      gameType: GameType.SMALL,\n      gameMap: [],\n      mines: 10,\n      gameState: GameState.INITIAL,\n      remainingCells: -1,\n    };\n  }\n\n  componentWillMount() {\n    this.createGame();\n  }\n\n  createGame = () => {\n    let x: number, y: number, mines: number;\n    switch (this.state.gameType) {\n      case GameType.SMALL:\n        x = y = 10;\n        mines = 10;\n        break;\n      case GameType.MEDIUM:\n        x = y = 16;\n        mines = 40;\n        break;\n      default:\n        x = 16;\n        y = 30;\n        mines = 99;\n        break;\n    }\n    let gameMap: Cell[][] = [];\n    for (let i = 0; i < x; i++) {\n      gameMap = [\n        ...gameMap,\n        [...Array(y)].map(() => ({\n          mined: false,\n          neighbourMines: 0,\n          state: CellState.UNDISCOVERED,\n        })),\n      ];\n    }\n    this.setState({\n      gameMap,\n      mines,\n      remainingCells: x * y - mines,\n    });\n  };\n\n  startGame = (pressedX: number, pressedY: number) => {\n    let gameMap = [...this.state.gameMap.map(row => [...row])];\n    let x: number, y: number;\n    for (let { mines } = this.state; mines > 0; mines--) {\n      let minePlaced = false;\n      while (!minePlaced) {\n        x = Math.floor(Math.random() * Math.floor(gameMap.length));\n        y = Math.floor(Math.random() * Math.floor(gameMap[0].length));\n        if ((x === pressedX && y === pressedY) || gameMap[x][y].mined) continue;\n        gameMap[x][y].mined = true;\n        minePlaced = true;\n      }\n    }\n    for (let i = 0; i < this.state.gameMap.length; i++) {\n      for (let j = 0; j < this.state.gameMap[i].length; j++) {\n        let neighbourBombs = 0;\n        if (i - 1 >= 0 && j - 1 >= 0 && gameMap[i - 1][j - 1]?.mined) neighbourBombs++; // Top left\n        if (j - 1 >= 0 && gameMap[i][j - 1]?.mined) neighbourBombs++; // Top\n        if (i + 1 < gameMap.length && j - 1 >= 0 && gameMap[i + 1][j - 1]?.mined) neighbourBombs++; // Top right\n        if (i - 1 >= 0 && gameMap[i - 1][j]?.mined) neighbourBombs++; // Left\n        if (i + 1 < gameMap.length && gameMap[i + 1][j]?.mined) neighbourBombs++; // Right\n        if (i - 1 >= 0 && j + 1 <= gameMap[i].length && gameMap[i - 1][j + 1]?.mined)\n          neighbourBombs++; // Bottom left\n        if (j + 1 <= gameMap[i].length && gameMap[i][j + 1]?.mined) neighbourBombs++; // Bottom\n        if (i + 1 < gameMap.length && j + 1 <= gameMap[i].length && gameMap[i + 1][j + 1]?.mined)\n          neighbourBombs++; // Bottom right\n        gameMap[i][j].neighbourMines = neighbourBombs;\n      }\n    }\n    gameMap = this.clearCell(gameMap, pressedX, pressedY);\n    this.setState({ gameMap, gameState: GameState.RUNNING });\n  };\n\n  loseGame = (x: number, y: number) => {\n    const gameMap = [...this.state.gameMap.map(row => [...row])];\n    for (let i = 0; i < this.state.gameMap.length; i++) {\n      for (let j = 0; j < this.state.gameMap[i].length; j++) {\n        if (gameMap[i][j].mined && gameMap[i][j].state !== CellState.FLAGGED)\n          gameMap[i][j].state = CellState.DISCOVERED;\n      }\n    }\n    gameMap[x][y].minePressed = true;\n    this.setState({\n      gameMap,\n      gameState: GameState.FINISHED,\n    });\n  };\n\n  flagCell = (x: number, y: number) => {\n    const gameMap = [...this.state.gameMap.map(row => [...row])];\n    gameMap[x][y].state =\n      gameMap[x][y].state === CellState.FLAGGED ? CellState.UNDISCOVERED : CellState.FLAGGED;\n    this.setState({ gameMap });\n  };\n\n  clearCell = (propsMap: Cell[][], x: number, y: number, pressed = false): Cell[][] => {\n    let gameMap = [...propsMap.map(row => [...row])];\n    gameMap[x][y].state = CellState.DISCOVERED;\n    if (gameMap[x][y].neighbourMines === 0) {\n      if (x - 1 >= 0 && y - 1 >= 0 && gameMap[x - 1][y - 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x - 1, y - 1); // Top left\n      if (y - 1 >= 0 && gameMap[x][y - 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x, y - 1); // Top\n      if (\n        x + 1 < gameMap.length &&\n        y - 1 >= 0 &&\n        gameMap[x + 1][y - 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x + 1, y - 1); // Top right\n      if (x - 1 >= 0 && gameMap[x - 1][y]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x - 1, y); // Left\n      if (x + 1 < gameMap.length && gameMap[x + 1][y]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x + 1, y); // Right\n      if (\n        x - 1 >= 0 &&\n        y + 1 <= gameMap[x].length &&\n        gameMap[x - 1][y + 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x - 1, y + 1); // Bottom left\n      if (y + 1 <= gameMap[x].length && gameMap[x][y + 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x, y + 1); // Bottom\n      if (\n        x + 1 < gameMap.length &&\n        y + 1 <= gameMap[x].length &&\n        gameMap[x + 1][y + 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x + 1, y + 1); // Bottom right\n      return gameMap;\n    }\n\n    if (x - 1 >= 0 && y - 1 >= 0 && isCellClearable(gameMap, x - 1, y - 1))\n      gameMap = this.clearCell(gameMap, x - 1, y - 1); // Top left\n    if (y - 1 >= 0 && isCellClearable(gameMap, x, y - 1))\n      gameMap = this.clearCell(gameMap, x, y - 1); // Top\n    if (x + 1 < gameMap.length && y - 1 >= 0 && isCellClearable(gameMap, x + 1, y - 1))\n      gameMap = this.clearCell(gameMap, x + 1, y - 1); // Top right\n    if (x - 1 >= 0 && isCellClearable(gameMap, x - 1, y))\n      gameMap = this.clearCell(gameMap, x - 1, y); // Left\n    if (x + 1 < gameMap.length && isCellClearable(gameMap, x + 1, y))\n      gameMap = this.clearCell(gameMap, x + 1, y); // Right\n    if (x - 1 >= 0 && y + 1 <= gameMap[x].length && isCellClearable(gameMap, x - 1, y + 1))\n      gameMap = this.clearCell(gameMap, x - 1, y + 1); // Bottom left\n    if (y + 1 <= gameMap[x].length && isCellClearable(gameMap, x, y + 1))\n      gameMap = this.clearCell(gameMap, x, y + 1); // Bottom\n    if (\n      x + 1 < gameMap.length &&\n      y + 1 <= gameMap[x].length &&\n      isCellClearable(gameMap, x + 1, y + 1)\n    )\n      gameMap = this.clearCell(gameMap, x + 1, y + 1); // Bottom right\n    return gameMap;\n  };\n\n  onClickCell = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, x: number, y: number): void => {\n    if (this.state.gameState !== GameState.FINISHED)\n      if (e.type === 'click') {\n        if (this.state.gameState === GameState.INITIAL) {\n          return this.startGame(x, y);\n        } else if (\n          this.state.gameMap[x][y].mined &&\n          this.state.gameMap[x][y].state !== CellState.FLAGGED\n        ) {\n          return this.loseGame(x, y);\n        } else if (this.state.gameMap[x][y].state !== CellState.FLAGGED) {\n          const gameMap = this.clearCell(this.state.gameMap, x, y, true);\n          const remainingCells = gameMap.reduce(\n            (count, row, i) =>\n              count +\n              row.reduce(\n                (rowCount, cell) =>\n                  cell.state === CellState.UNDISCOVERED && !cell.mined ? rowCount + 1 : rowCount,\n                0\n              ),\n            0\n          );\n          this.setState({\n            gameMap,\n            remainingCells,\n            gameState: remainingCells === 0 ? GameState.FINISHED : this.state.gameState,\n          });\n        }\n      } else if (\n        e.type === 'contextmenu' &&\n        this.state.gameState === GameState.RUNNING &&\n        this.state.gameMap[x][y].state !== CellState.DISCOVERED\n      ) {\n        return this.flagCell(x, y);\n      }\n  };\n\n  renderCell = (cell: Cell, x: number, y: number) => {\n    return (\n      <div\n        className={`cell ${cell.state === CellState.DISCOVERED &&\n          'cell-discovered'} ${cell.state === CellState.FLAGGED &&\n          'cell-flagged'} ${cell.minePressed && 'cell-mine-pressed'}`}\n        onContextMenu={e => this.onClickCell(e, x, y)}\n        onClick={e => this.onClickCell(e, x, y)}\n        key={`${x}-${y}`}\n      >\n        <span className=\"cell-text\">{this.renderCellContent(cell)}</span>\n      </div>\n    );\n  };\n\n  renderCellContent = (cell: Cell) => {\n    switch (cell.state) {\n      case CellState.UNDISCOVERED:\n        return <span></span>;\n      case CellState.DISCOVERED: {\n        if (cell.mined) {\n          return <img src={bomb} className=\"App-icon\" alt=\"bomb\" />;\n        }\n        return (\n          <span className={`cell-value cell-value-${cell.neighbourMines}`}>\n            {cell.neighbourMines > 0 && cell.neighbourMines}\n          </span>\n        );\n      }\n      case CellState.FLAGGED:\n        return <img src={flag} className=\"App-icon\" alt=\"flag\" />;\n    }\n  };\n\n  renderGame = (): ReactNode => (\n    <div>\n      {this.state.gameMap.map((row, x) => (\n        <div className=\"row\" key={x}>\n          {row.map((cell, y) => this.renderCell(cell, x, y))}\n        </div>\n      ))}\n    </div>\n  );\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.SMALL, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            SMALL\n          </div>\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.MEDIUM, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            MEDIUM\n          </div>\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.BIG, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            BIG\n          </div>\n        </div>\n        <header className=\"App-game\">\n          <div>{this.renderGame()}</div>\n          {this.state.gameState === GameState.FINISHED && (\n            <div className={`end ${this.state.remainingCells === 0 ? 'won' : 'lost'}`}>\n              <img\n                src={this.state.remainingCells === 0 ? smile : sad}\n                className=\"App-result-icon\"\n                alt=\"game-result\"\n              />\n              <div className=\"result-text\">{this.state.remainingCells === 0 ? 'Win' : 'Lost'}</div>\n              <div\n                className=\"replay\"\n                onClick={() => this.setState({ gameState: GameState.INITIAL }, this.createGame)}\n              >\n                Replay ?\n              </div>\n            </div>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\ndocument.oncontextmenu = function() {\n  return false;\n};\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}