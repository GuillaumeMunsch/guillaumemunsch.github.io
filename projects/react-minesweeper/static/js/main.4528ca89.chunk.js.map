{"version":3,"sources":["assets/flag.svg","assets/bomb.svg","assets/smile.svg","assets/sad.svg","types/Cell.tsx","types/GameType.tsx","types/GameState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CellState","GameType","GameState","App","props","createGame","x","y","mines","state","gameType","SMALL","MEDIUM","gameMap","i","Array","map","mined","neighbourMines","UNDISCOVERED","setState","remainingCells","startGame","pressedX","pressedY","row","minePlaced","Math","floor","random","length","j","neighbourBombs","clearCell","gameState","RUNNING","loseGame","FLAGGED","DISCOVERED","minePressed","FINISHED","flagCell","propsMap","onClickCell","e","type","INITIAL","reduce","count","rowCount","cell","renderCell","className","onContextMenu","onClick","key","renderCellContent","src","bomb","alt","flag","renderGame","this","BIG","smile","sad","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","oncontextmenu","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4528ca89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flag.35d811aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/bomb.65450681.svg\";","module.exports = __webpack_public_path__ + \"static/media/smile.73d502ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sad.7b49a330.svg\";","export enum CellState {\n    UNDISCOVERED,\n    DISCOVERED,\n    FLAGGED,\n}\n\nexport interface Cell {\n  state: CellState;\n  neighbourMines: number;\n  mined: boolean;\n  minePressed?: boolean;\n}\n","export enum GameType {\n    SMALL,\n    MEDIUM,\n    BIG\n}","export enum GameState {\n    INITIAL,\n    RUNNING,\n    FINISHED\n}","import React, { Component, ReactNode } from 'react';\nimport { Cell, CellState } from 'types/Cell';\nimport { GameType } from 'types/GameType';\nimport { GameState } from 'types/GameState';\nimport flag from 'assets/flag.svg';\nimport bomb from 'assets/bomb.svg';\nimport smile from 'assets/smile.svg';\nimport sad from 'assets/sad.svg';\nimport './App.css';\n\ninterface Props {}\n\ninterface State {\n  gameType: GameType;\n  gameMap: Cell[][];\n  mines: number;\n  gameState: GameState;\n  remainingCells: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      gameType: GameType.SMALL,\n      gameMap: [],\n      mines: 10,\n      gameState: GameState.INITIAL,\n      remainingCells: -1,\n    };\n  }\n\n  componentWillMount() {\n    this.createGame();\n  }\n\n  createGame = () => {\n    let x: number, y: number, mines: number;\n    switch (this.state.gameType) {\n      case GameType.SMALL:\n        x = y = 10;\n        mines = 10;\n        break;\n      case GameType.MEDIUM:\n        x = y = 16;\n        mines = 40;\n        break;\n      default:\n        x = 16;\n        y = 30;\n        mines = 99;\n        break;\n    }\n    let gameMap: Cell[][] = [];\n    for (let i = 0; i < x; i++) {\n      gameMap = [\n        ...gameMap,\n        [...Array(y)].map(() => ({\n          mined: false,\n          neighbourMines: 0,\n          state: CellState.UNDISCOVERED,\n        })),\n      ];\n    }\n    this.setState({\n      gameMap,\n      mines,\n      remainingCells: x * y - mines,\n    });\n  };\n\n  startGame = (pressedX: number, pressedY: number) => {\n    let gameMap = [...this.state.gameMap.map(row => [...row])];\n    let x: number, y: number;\n    for (let { mines } = this.state; mines > 0; mines--) {\n      let minePlaced = false;\n      while (!minePlaced) {\n        x = Math.floor(Math.random() * Math.floor(gameMap.length));\n        y = Math.floor(Math.random() * Math.floor(gameMap[0].length));\n        if ((x === pressedX && y === pressedY) || gameMap[x][y].mined) continue;\n        gameMap[x][y].mined = true;\n        minePlaced = true;\n      }\n    }\n    for (let i = 0; i < this.state.gameMap.length; i++) {\n      for (let j = 0; j < this.state.gameMap[i].length; j++) {\n        let neighbourBombs = 0;\n        if (i - 1 >= 0 && j - 1 >= 0 && gameMap[i - 1][j - 1]?.mined) neighbourBombs++; // Top left\n        if (j - 1 >= 0 && gameMap[i][j - 1]?.mined) neighbourBombs++; // Top\n        if (i + 1 < gameMap.length && j - 1 >= 0 && gameMap[i + 1][j - 1]?.mined) neighbourBombs++; // Top right\n        if (i - 1 >= 0 && gameMap[i - 1][j]?.mined) neighbourBombs++; // Left\n        if (i + 1 < gameMap.length && gameMap[i + 1][j]?.mined) neighbourBombs++; // Right\n        if (i - 1 >= 0 && j + 1 <= gameMap[i].length && gameMap[i - 1][j + 1]?.mined)\n          neighbourBombs++; // Bottom left\n        if (j + 1 <= gameMap[i].length && gameMap[i][j + 1]?.mined) neighbourBombs++; // Bottom\n        if (i + 1 < gameMap.length && j + 1 <= gameMap[i].length && gameMap[i + 1][j + 1]?.mined)\n          neighbourBombs++; // Bottom right\n        gameMap[i][j].neighbourMines = neighbourBombs;\n      }\n    }\n    gameMap = this.clearCell(gameMap, pressedX, pressedY);\n    this.setState({ gameMap, gameState: GameState.RUNNING });\n  };\n\n  loseGame = (x: number, y: number) => {\n    const gameMap = [...this.state.gameMap.map(row => [...row])];\n    for (let i = 0; i < this.state.gameMap.length; i++) {\n      for (let j = 0; j < this.state.gameMap[i].length; j++) {\n        if (gameMap[i][j].mined && gameMap[i][j].state !== CellState.FLAGGED)\n          gameMap[i][j].state = CellState.DISCOVERED;\n      }\n    }\n    gameMap[x][y].minePressed = true;\n    this.setState({\n      gameMap,\n      gameState: GameState.FINISHED,\n    });\n  };\n\n  flagCell = (x: number, y: number) => {\n    const gameMap = [...this.state.gameMap.map(row => [...row])];\n    gameMap[x][y].state =\n      gameMap[x][y].state === CellState.FLAGGED ? CellState.UNDISCOVERED : CellState.FLAGGED;\n    this.setState({ gameMap });\n  };\n\n  clearCell = (propsMap: Cell[][], x: number, y: number, pressed = false): Cell[][] => {\n    let gameMap = [...propsMap.map(row => [...row])];\n    gameMap[x][y].state = CellState.DISCOVERED;\n    if (gameMap[x][y].neighbourMines === 0) {\n      if (x - 1 >= 0 && y - 1 >= 0 && gameMap[x - 1][y - 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x - 1, y - 1); // Top left\n      if (y - 1 >= 0 && gameMap[x][y - 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x, y - 1); // Top\n      if (\n        x + 1 < gameMap.length &&\n        y - 1 >= 0 &&\n        gameMap[x + 1][y - 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x + 1, y - 1); // Top right\n      if (x - 1 >= 0 && gameMap[x - 1][y]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x - 1, y); // Left\n      if (x + 1 < gameMap.length && gameMap[x + 1][y]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x + 1, y); // Right\n      if (\n        x - 1 >= 0 &&\n        y + 1 <= gameMap[x].length &&\n        gameMap[x - 1][y + 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x - 1, y + 1); // Bottom left\n      if (y + 1 <= gameMap[x].length && gameMap[x][y + 1]?.state === CellState.UNDISCOVERED)\n        gameMap = this.clearCell(gameMap, x, y + 1); // Bottom\n      if (\n        x + 1 < gameMap.length &&\n        y + 1 <= gameMap[x].length &&\n        gameMap[x + 1][y + 1]?.state === CellState.UNDISCOVERED\n      )\n        gameMap = this.clearCell(gameMap, x + 1, y + 1); // Bottom right\n      return gameMap;\n    }\n    return gameMap;\n  };\n\n  onClickCell = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, x: number, y: number): void => {\n    if (this.state.gameState !== GameState.FINISHED)\n      if (e.type === 'click') {\n        if (this.state.gameState === GameState.INITIAL) {\n          return this.startGame(x, y);\n        } else if (\n          this.state.gameMap[x][y].mined &&\n          this.state.gameMap[x][y].state !== CellState.FLAGGED\n        ) {\n          return this.loseGame(x, y);\n        } else if (this.state.gameMap[x][y].state !== CellState.FLAGGED) {\n          const gameMap = this.clearCell(this.state.gameMap, x, y, true);\n          const remainingCells = gameMap.reduce(\n            (count, row, i) =>\n              count +\n              row.reduce(\n                (rowCount, cell) =>\n                  cell.state === CellState.UNDISCOVERED && !cell.mined ? rowCount + 1 : rowCount,\n                0\n              ),\n            0\n          );\n          this.setState({\n            gameMap,\n            remainingCells,\n            gameState: remainingCells === 0 ? GameState.FINISHED : this.state.gameState,\n          });\n        }\n      } else if (\n        e.type === 'contextmenu' &&\n        this.state.gameState === GameState.RUNNING &&\n        this.state.gameMap[x][y].state !== CellState.DISCOVERED\n      ) {\n        return this.flagCell(x, y);\n      }\n  };\n\n  renderCell = (cell: Cell, x: number, y: number) => {\n    return (\n      <div\n        className={`cell ${cell.state === CellState.DISCOVERED &&\n          'cell-discovered'} ${cell.state === CellState.FLAGGED &&\n          'cell-flagged'} ${cell.minePressed && 'cell-mine-pressed'}`}\n        onContextMenu={e => this.onClickCell(e, x, y)}\n        onClick={e => this.onClickCell(e, x, y)}\n        key={`${x}-${y}`}\n      >\n        <span className=\"cell-text\">{this.renderCellContent(cell)}</span>\n      </div>\n    );\n  };\n\n  renderCellContent = (cell: Cell) => {\n    switch (cell.state) {\n      case CellState.UNDISCOVERED:\n        return <span></span>;\n      case CellState.DISCOVERED: {\n        if (cell.mined) {\n          return <img src={bomb} className=\"App-icon\" alt=\"bomb\" />;\n        }\n        return (\n          <span className={`cell-value cell-value-${cell.neighbourMines}`}>\n            {cell.neighbourMines > 0 && cell.neighbourMines}\n          </span>\n        );\n      }\n      case CellState.FLAGGED:\n        return <img src={flag} className=\"App-icon\" alt=\"flag\" />;\n    }\n  };\n\n  renderGame = (): ReactNode => (\n    <div>\n      {this.state.gameMap.map((row, x) => (\n        <div className=\"row\" key={x}>\n          {row.map((cell, y) => this.renderCell(cell, x, y))}\n        </div>\n      ))}\n    </div>\n  );\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.SMALL, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            SMALL\n          </div>\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.MEDIUM, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            MEDIUM\n          </div>\n          <div\n            className=\"btn\"\n            onClick={() =>\n              this.setState(\n                { gameType: GameType.BIG, gameState: GameState.INITIAL },\n                this.createGame\n              )\n            }\n          >\n            BIG\n          </div>\n        </div>\n        <header className=\"App-game\">\n          <div>{this.renderGame()}</div>\n          {this.state.gameState === GameState.FINISHED && (\n            <div className={`end ${this.state.remainingCells === 0 ? 'won' : 'lost'}`}>\n              <img\n                src={this.state.remainingCells === 0 ? smile : sad}\n                className=\"App-result-icon\"\n                alt=\"game-result\"\n              />\n              <div className=\"result-text\">{this.state.remainingCells === 0 ? 'Win' : 'Lost'}</div>\n              <div\n                className=\"replay\"\n                onClick={() => this.setState({ gameState: GameState.INITIAL }, this.createGame)}\n              >\n                Replay ?\n              </div>\n            </div>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\ndocument.oncontextmenu = function() {\n  return false;\n};\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}