{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["createMap","width","height","squareSize","Array","Math","ceil","map","_","x","elem","y","getDefaultState","window","innerWidth","innerHeight","headerHeight","running","roundTime","App","props","updateWindowDimensions","setState","drawGrid","onCanvasPress","e","floor","pageX","state","pageY","row","canvasContext","fillRect","clearRect","reset","canvas","refs","addEventListener","getContext","beginPath","console","log","i","moveTo","lineTo","length","stroke","updateCell","neighbourCount","startAndStopGame","setTimeout","newMap","this","removeEventListener","className","style","backgroundColor","flexDirection","display","alignItems","justifyContent","onClick","disabled","type","value","onChange","parseInt","target","isNaN","min","max","step","random","ref","PureComponent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47bb2ce7.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './App.css';\n\nconst DEFAULT_ROUND_TIME_VALUE = 200; // ms\nconst DEFAULT_SQUARE_SIZE_VALUE = 30;\n\ninterface State {\n    headerHeight: number;\n    width: number;\n    height: number;\n    squareSize: number;\n    map: boolean[][];\n    canvasContext?: any;\n    running: boolean;\n    roundTime: number;\n}\n\nconst createMap = (width: number, height: number, squareSize: number): boolean[][] =>\n    [...Array(Math.ceil(width / squareSize))].map((_, x) =>\n        [...Array(Math.ceil(height / squareSize))].map((elem, y) => false),\n    );\n\nconst getDefaultState = (): State => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n        headerHeight: 60,\n        squareSize: DEFAULT_SQUARE_SIZE_VALUE,\n        map: createMap(width, height, DEFAULT_SQUARE_SIZE_VALUE),\n        running: false,\n        roundTime: DEFAULT_ROUND_TIME_VALUE,\n    };\n};\n\nclass App extends PureComponent<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = getDefaultState();\n    }\n    componentDidMount(): void {\n        window.addEventListener('resize', this.updateWindowDimensions);\n        this.drawGrid();\n    }\n\n    componentWillUnmount(): void {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = (): void => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight }, this.drawGrid);\n    };\n\n    onCanvasPress = (e: any): void => {\n        const x = Math.floor(e.pageX / this.state.squareSize);\n        const y = Math.floor((e.pageY - this.state.headerHeight) / this.state.squareSize);\n        const map = [...this.state.map.map(row => [...row])];\n        map[x][y] = !map[x][y];\n        if (map[x][y])\n            this.state.canvasContext.fillRect(\n                x * this.state.squareSize,\n                y * this.state.squareSize,\n                this.state.squareSize,\n                this.state.squareSize,\n            );\n        else\n            this.state.canvasContext.clearRect(\n                x * this.state.squareSize + 1,\n                y * this.state.squareSize + 1,\n                this.state.squareSize - 1,\n                this.state.squareSize - 1,\n            );\n        this.setState({ map });\n    };\n\n    drawGrid = (reset = false): void => {\n        let canvasContext: any;\n        if (this.state.canvasContext) {\n            canvasContext = this.state.canvasContext;\n        } else {\n            const canvas: any = this.refs.canvas;\n            canvas.addEventListener('mousedown', this.onCanvasPress, false);\n            canvasContext = canvas.getContext('2d');\n        }\n        canvasContext.beginPath();\n        if (reset) {\n            console.log('On clear');\n            canvasContext.clearRect(0, 0, 500, 500);\n        }\n        for (let i = 0; i < this.state.width; i += this.state.squareSize) {\n            // Drawing grid\n            canvasContext.moveTo(i, 0);\n            canvasContext.lineTo(i, this.state.height);\n            canvasContext.moveTo(0, i);\n            canvasContext.lineTo(this.state.width, i);\n        }\n        for (let x = 0; x < this.state.map.length; x++) {\n            for (let y = 0; y < this.state.map[x].length; y++) {\n                const elem = this.state.map[x][y];\n                if (elem) {\n                    canvasContext.fillRect(\n                        x * this.state.squareSize,\n                        y * this.state.squareSize,\n                        this.state.squareSize,\n                        this.state.squareSize,\n                    );\n                } else {\n                    canvasContext.clearRect(\n                        x * this.state.squareSize + 1,\n                        y * this.state.squareSize + 1,\n                        this.state.squareSize - 1,\n                        this.state.squareSize - 1,\n                    );\n                }\n            }\n        }\n        canvasContext.stroke();\n        this.setState({ canvasContext });\n    };\n\n    updateCell = (x: number, y: number, map: boolean[][]): boolean => {\n        let neighbourCount = 0;\n        if (x - 1 >= 0 && y - 1 >= 0 && map[x - 1][y - 1]) neighbourCount++; // Top left\n        if (y - 1 >= 0 && map[x][y - 1]) neighbourCount++; // Top\n        if (x + 1 < map.length && y - 1 >= 0 && map[x + 1][y - 1]) neighbourCount++; // Top right\n        if (x - 1 >= 0 && map[x - 1][y]) neighbourCount++; // Left\n        if (x + 1 < map.length && map[x + 1][y]) neighbourCount++; // Right\n        if (x - 1 >= 0 && y + 1 <= map[x].length && map[x - 1][y + 1]) neighbourCount++; // Bottom left\n        if (y + 1 <= map[x].length && map[x][y + 1]) neighbourCount++; // Bottom\n        if (x + 1 < map.length && y + 1 <= map[x].length && map[x + 1][y + 1]) neighbourCount++; // Bottom right\n        if (map[x][y]) {\n            // Cell alive for now\n            return neighbourCount === 2 || neighbourCount === 3;\n        }\n        // No cell for now\n        return neighbourCount === 3;\n    };\n\n    startAndStopGame = (): void => {\n        if (this.state.running) {\n            setTimeout(() => {\n                const newMap = [...this.state.map.map(row => [...row])];\n                for (let x = 0; x < newMap.length; x++)\n                    for (let y = 0; y < newMap[x].length; y++)\n                        newMap[x][y] = this.updateCell(x, y, this.state.map);\n                this.setState({ map: newMap }, () => {\n                    this.drawGrid();\n                    this.startAndStopGame();\n                });\n            }, this.state.roundTime);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div\n                    style={{\n                        height: this.state.headerHeight,\n                        backgroundColor: '#3090C7',\n                        flexDirection: 'row',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <div className=\"header-item\">\n                        <button\n                            onClick={(): void =>\n                                this.setState({ running: !this.state.running }, () =>\n                                    this.startAndStopGame(),\n                                )\n                            }\n                        >\n                            {this.state.running ? 'Stop' : 'Start'}\n                        </button>\n                    </div>\n                    <div className=\"header-item\">\n                        <span>Time (in ms): </span>\n                        <input\n                            disabled={this.state.running}\n                            type=\"text\"\n                            value={this.state.roundTime}\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>): void => {\n                                let roundTime = parseInt(e.target.value);\n                                if (isNaN(roundTime)) roundTime = DEFAULT_ROUND_TIME_VALUE;\n                                this.setState({ roundTime });\n                            }}\n                        />\n                    </div>\n                    <div className=\"header-item\">\n                        <span>Square size (in px): </span>\n                        <input\n                            disabled={this.state.running}\n                            type=\"number\"\n                            value={this.state.squareSize}\n                            min=\"10\"\n                            max=\"100\"\n                            step=\"5\"\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>): void => {\n                                let squareSize = parseInt(e.target.value);\n                                if (isNaN(squareSize)) squareSize = DEFAULT_SQUARE_SIZE_VALUE;\n                                else if (\n                                    squareSize < 10 ||\n                                    squareSize > 100 ||\n                                    squareSize % 5 !== 0\n                                )\n                                    squareSize = this.state.squareSize;\n                                this.setState(\n                                    {\n                                        squareSize,\n                                        map: createMap(\n                                            this.state.width,\n                                            this.state.height,\n                                            squareSize,\n                                        ),\n                                    },\n                                    () => this.drawGrid(true),\n                                );\n                            }}\n                        />\n                    </div>\n                    <div className=\"header-item\">\n                        <button\n                            disabled={this.state.running}\n                            onClick={(): void => {\n                                const newMap = [...this.state.map.map(row => [...row])];\n                                for (let x = 0; x < newMap.length; x++)\n                                    for (let y = 0; y < newMap[x].length; y++) {\n                                        const value = Math.floor(Math.random() * 10) % 9 === 0;\n                                        newMap[x][y] = value;\n                                    }\n                                console.log(newMap);\n                                this.setState({ map: newMap }, () => this.drawGrid(true));\n                            }}\n                        >\n                            Random fill\n                        </button>\n                    </div>\n                    <div className=\"header-item\">\n                        <button\n                            disabled={this.state.running}\n                            onClick={(): void =>\n                                this.setState(getDefaultState(), () => this.drawGrid(true))\n                            }\n                        >\n                            Clear\n                        </button>\n                    </div>\n                </div>\n                <canvas\n                    ref=\"canvas\"\n                    width={this.state.width}\n                    height={this.state.height - this.state.headerHeight}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}